module.exports.config = {
  name: "chatandanh",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "mindat",
  description: "Chat ·∫©n danh qua Bot",
  commandCategory: "Ti·ªán √≠ch",
  usages: "[random/id/check]",
  cooldowns: 0
}

const fs = require('fs-extra');
const axios = require('axios');
const rcp = require('path').resolve(__dirname, 'cache', 'rcp.json');
module.exports.onLoad = function () {
  if (!fs.existsSync(rcp)) fs.writeFileSync(rcp, '[]');
}

module.exports.run = async function ({ api, event, Users, args }) {
  const { messageID, threadID, isGroup } = event;
  const o = (m, c = () => { }, id = threadID) => api.sendMessage(m, id, c, messageID);
  const s = api.sendMessage;
  if (isGroup) return o("B·∫°n ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng l·ªánh n√†y khi tin nh·∫Øn ri√™ng v·ªõi Bot nh√©");
  var rc = {};
  rc.root = threadID;
  rc.head = null;
  rc.isWaiting = false;
  rc.isStarted = false;
  rc.isError = false;
  rc.rootIsIncognito = true;
  rc.headIsIncognito = true;
  rc.isRandom = false;
if (!args[0]) return api.sendMessage(`C√°ch s·ª≠ d·ª•ng:\n${global.config.PREFIX}chatandanh random: t√¨m ki·∫øm ng·∫´u nhi√™n\n${global.config.PREFIX}chatandanh end: k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán\n${global.config.PREFIX}chatandanh ( ID b·∫°n mu·ªën tr√≤ chuy·ªán b·∫±ng c√°ch ph·∫£n h·ªìi tin nh·∫Øn ng∆∞·ªùi ƒë√≥ ho·∫∑c s·ª≠ d·ª•ng link FB h·ªç sau ƒë√≥ d√πng l·ªánh ƒë·ªÉ l·∫•y UID...v√≠ d·ª• !chatandanh 100020908143321 ): t√¨m ki·∫øm theo y√™u c·∫ßu\n${global.config.PREFIX}chatandanh info: info c·ªßa cu·ªôc tr√≤ chuy·ªán`, event.threadID);
  switch (args[0]) {
    case 'random':
      var data = require(rcp);
      if (data.some(e => (e.root == threadID || e.head == threadID))) return o("B·∫°n hi√™n ng·ªìi ch·ªù k·∫øt n·ªëi v·ªõi m·ªôt ng∆∞·ªùi kh√°c.Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu n√†y");
      rc.isRandom = true;
      o("B·∫°n v·ª´a ch·ªçn ng·∫´u nhi√™n\nB·∫°n c√≥ mu·ªën ·∫©n th√¢n\n\nTr·∫£ l·ªùi tin nh·∫Øn n√†y s·ªë 1 n·∫øu mu·ªën ·∫©n th√¢n ho·∫∑c ch·ªçn s·ªë 0 n·∫øu mu·ªën c√¥ng khai th√¢n ph·∫≠n v·ªõi ƒë·ªëi ph∆∞∆°ng üíå", (_, i) => global.client.handleReply.push({ type: 'incognitoRootRandomHead', name: this.config.name, author: threadID, messageID: i.messageID, data: rc }));
      break;
    case 'reject':
      var data = require(rcp);
      if (data.some(e => e.head == threadID && e.isWaiting)) {
        let rj = data.findIndex(e => e.head == threadID);
        o("B·∫°n v·ª´a t·ª´ ch·ªëi k·∫øt n·ªëi li√™n h·ªáüòøüíî", () => {
          s("Ng∆∞·ªùi li√™n h·ªá ƒë√£ t·ª´ ch·ªëi k·∫øt n·ªëi v·ªõi b·∫°nüòøüíî", data[rj].root);
          data.splice(rj, 1);
          fs.writeFileSync(rcp, JSON.stringify(data, null, 4));
        });
      } else o("Kh√¥ng c√≥ li√™n h·ªá n√†o ch·ªù k·∫øt n·ªëi c·ªßa b·∫°nüòøüíî");
      break;
    case 'accept':
      var data = require(rcp);
      if (data.some(e => e.head == threadID && e.isWaiting)) {
        let ac = data.find(e => e.head == threadID && e.isWaiting);
        o("B·∫°n v·ª´a ch·∫•p nh·∫≠n k·∫øt n·ªëi v·ªõi ƒë·ªëi ph∆∞∆°ng üíå\nB·∫°n c√≥ mu·ªën ·∫©n th√¢n\n\nTr·∫£ l·ªùi tin nh·∫Øn n√†y s·ªë 1 n·∫øu mu·ªën ·∫©n th√¢n ho·∫∑c ch·ªçn s·ªë 0 n·∫øu mu·ªën c√¥ng khai th√¢n ph·∫≠n v·ªõi ƒë·ªëi ph∆∞∆°ng üíå", (_, i) => global.client.handleReply.push({ type: 'incognitoHead', name: this.config.name, author: threadID, messageID: i.messageID, data: ac }))
      }
      break;
    case 'end':
    case 'leave':
    case '-l':
      var data = require(rcp);
      if (data.some(e => (e.root == threadID || e.head == threadID))) {
        var end = data.findIndex(e => (e.root == threadID || e.head == threadID));
        var endData = data[end];
        var enderId = endData.root == threadID ? endData.root : endData.head;
        var remain = endData.root == threadID ? endData.head : endData.root;
        var enderIncognito = endData.root == threadID ? endData.rootIsIncognito : endData.headIsIncognito;
        o("B·∫°n v·ª´a k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán", async (er) => {
          var enderName = await Users.getNameUser(enderId);
          var msg = enderIncognito == false ? `${enderName} v·ª´a r·ªùi kh·ªèi cu·ªôc tr√≤ chuy·ªán` : "ƒê·ªëi ph∆∞∆°ng ƒë√£ r·ªùi kh·ªèi cu·ªôc tr√≤ chuy·ªán";
          return s(msg, remain);
        });
        data.splice(end, 1);
        fs.writeFileSync(rcp, JSON.stringify(data, null, 4));
      } else o("Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o ƒëang di·ªÖn ra");
      break;
    case "data":
      var data = require(rcp);
      console.log(JSON.stringify(data));
      break;
    case "check":
    case "info":
    case "-i":
      var data = require(rcp);
      if (data.some(e => (e.root == threadID || e.head == threadID))) {
        var rcData = data.find(e => (e.root == threadID || e.head == threadID));
        var incognito = rcData.root == threadID ? rcData.headIsIncognito : rcData.rootIsIncognito;
        var msg = 'Th√¥ng tin:';
        msg += '\n\n- ID c·ªßa b·∫°n: ' + threadID;
        if (incognito == true) msg += '\n- ƒê·ªëi ph∆∞∆°ng: ID ƒë√£ b·ªã ·∫©n';
        else {
          var name = await Users.getNameUser((rcData.head == threadID ? rcData.root : rcData.head));
          msg += '\n- ƒê·ªëi ph∆∞∆°ng: ' + (rcData.head == threadID ? rcData.root : rcData.head) + ' - ' + name;
        }
        msg += '\n- Tr·∫°ng th√°i: ' + (rcData.isWaiting ? 'ch·ªù ƒë∆∞·ª£c ch·∫•p nh·∫≠n' : rcData.isStarted ? 'ƒêang chat...' : '???');
        return o(msg);
      } else o("Kh√¥ng c√≥ cu·ªôc tr√≤ truy·ªán n√†o ƒëang di·ªÖn ra");
    default:
      var data = require(rcp);
      if (data.some(e => (e.root == threadID || e.head == threadID))) return o("B·∫°n hi·ªán c√≥ 1 k·∫øt n·ªëi kh√°c .Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu n√†y");
      if (!args[0] || isNaN(args[0])) return o("Vui l√≤ng nh·∫≠p UID b·∫°n mu·ªën chatüíå");
      rc.head = args[0];
      if (data.some(e => (e.root == rc.head || e.head == rc.head))) return o('Ng∆∞·ªùi b·∫°n mu·ªën k·∫øt n·ªëi hi·ªán ƒëang trong k·∫øt n·ªëi kh√°c vui l√≤ng th·ª≠ l·∫°i sau')
      o(`B·∫°n v·ª´a y√™u c·∫ßu ${args[0]} k·∫øt n·ªëi cu·ªôc tr√≤ chuy·ªán üíå\nB·∫°n c√≥ mu·ªën ·∫©n th√¢n\n\nTr·∫£ l·ªùi tin nh·∫Øn n√†y s·ªë 1 n·∫øu mu·ªën ·∫©n th√¢n ho·∫∑c ch·ªçn s·ªë 0 n·∫øu mu·ªën c√¥ng khai th√¢n ph·∫≠n v·ªõi ƒë·ªëi ph∆∞∆°ng üíå`, (_, i) => global.client.handleReply.push({ type: 'incognitoRoot', name: this.config.name, author: threadID, messageID: i.messageID, data: rc }));
      break;
  }
}

module.exports.handleReply = async function ({ handleReply, api, event, Users }) {
  const { threadID, messageID, body } = event;
  const o = (m, c = () => { }, id = threadID) => api.sendMessage(m, id, c, messageID);
  const s = api.sendMessage;
  switch (handleReply.type) {
    case 'incognitoRootRandomHead':
      var rcData = require(rcp);
      var rc = handleReply.data;
      var headID;
      if (body == 0) {
        rc.rootIsIncognito = true;
        o("B·∫°n ƒë√£ ch·ªçn gi·∫•u th√¢n ph·∫≠n üë•");
      } else if (body == 1) {
        rc.rootIsIncognito = false;
        o("B·∫°n ƒë√£ ch·ªçn hi·ªán th√¢n ph·∫≠n üíë");
      }
      const userID = global.data.allUserID;
      headID = userID[Math.floor(Math.random() * userID.length)];
      var rootName = await Users.getNameUser(rc.root);
      var fbUrl = 'https://facebook.com/' + rc.root;
      s((rc.rootIsIncognito ? "C√≥ 1 ng∆∞·ªùi li√™n h·ªá ·∫©n danh mu·ªën chat v·ªõi b·∫°n" : `M·ªôt ng∆∞·ªùi t√™n ${rootName} - ${fbUrl} mu·ªën tr√≤ chuy·ªán v·ªõi b·∫°n`) + `\nN·∫øu mu·ªën t·ª´ ch·ªëi h√£y s·ª≠ d·ª•ng l·ªánh: ${global.config.PREFIX}chatandanh reject\nN·∫øu mu·ªën ch·∫•p nh·∫≠n h√£y nh·∫≠p l·ªánh: ${global.config.PREFIX}chatandanh accept`, headID, (er, i) => {
        if (er) o("ƒê√£ c√≥ l·ªói x·∫£y ra khi c·ªë k·∫øt n·ªëi v·ªõi ng∆∞·ªùi li√™n h·ªá\nVui l√≤ng th·ª≠ l·∫°i sau");
        else {
          o("T√¨m ki·∫øm th√†nh c√¥ng\nH√£y ch·ªù k·∫øt n·ªëi t·ª´ ph√≠a b√™n kia‚è≥");
          rc.isWaiting = true;
          rc.head = headID;
          rcData.push(rc);
          fs.writeFileSync(rcp, JSON.stringify(rcData, null, 4));
        }
      });
      break;

    case 'incognitoHead':
      var rcData = require(rcp);
      var ac = handleReply.data;
      if (body == 1) {
        ac.headIsIncognito = true;
        o(`B·∫°n ƒë√£ ch·ªçn gi·∫•u ·∫©n th√¢n\nN·∫øu mu·ªën k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán h√£y s·ª≠ d·ª•ng: ${global.config.PREFIX}love end`);
      } else if (body == 0) {
        ac.headIsIncognito = false;
        o(`B·∫°n ch·ªçn hi·ªán th√¢n ph·∫≠n\nN·∫øu mu·ªën k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán h√£y s·ª≠ d·ª•ng: ${global.config.PREFIX}chatandanh end`);
      }
      ac.isWaiting = false;
      ac.isStarted = true;
      var nameHead = await Users.getNameUser(ac.head);
      var fbUrl = 'fb.com/' + ac.head;
      var msg = (ac.headIsIncognito ? "Ng∆∞·ªùi li√™n h·ªá ·∫©n danhüë•" : `${nameHead} - ${fbUrl}`) + ` v·ª´a ch·∫•p nh·∫≠n k·∫øt n·ªëi v·ªõi b·∫°n\nN·∫øu mu·ªën k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán h√£y s·ª≠ d·ª•ng: ${global.config.PREFIX}chatandanh end`;
      await s(msg, ac.root);
      var prevData = rcData.find(e => e.root = ac.root);
      Object.keys(prevData).map((v) => prevData[v] = ac[v]);
      fs.writeFileSync(rcp, JSON.stringify(rcData, null, 4));
      break;

    case 'incognitoRoot':
      var rcData = require(rcp);
      var rc = handleReply.data;
      if (body == 1) {
        rc.rootIsIncognito = true;
        o("B·∫°n ƒë√£ ch·ªçn gi·∫•u ·∫©n th√¢nüë•");
      } else if (body == 0) {
        rc.rootIsIncognito = false;
        o("B·∫°n ƒë√£ hi·ªán gi·∫•u ·∫©n th√¢n üíë");
      }
      var rootName = await Users.getNameUser(rc.root);
      var fbUrl = 'fb.com/' + rc.root;
      s((rc.rootIsIncognito ? "C√≥ 1 ng∆∞·ªùi li√™n h·ªá ·∫©n danh mu·ªën tr√≤ chuy·ªán v·ªõi b·∫°n" : `M·ªôt ng∆∞·ªùi t√™n ${rootName} - ${fbUrl} mu·ªën tr√≤ chuy·ªán v·ªõi b·∫°n.`) + `\nN·∫øu mu·ªën t·ª´ ch·ªëi h√£y s·ª≠ d·ª•ng l·ªánh: ${global.config.PREFIX}chatandanh reject\nN·∫øu mu·ªën ch·∫•p nh·∫≠n h√£y nh·∫≠p l·ªánh: ${global.config.PREFIX}chatandanh accept`, rc.head, (er, i) => {
        if (er) o("ƒê√£ c√≥ l·ªói x·∫£y ra khi c·ªë k·∫øt n·ªëi v·ªõi ng∆∞·ªùi li√™n h·ªá\nVui l√≤ng th·ª≠ l·∫°i sau");
        else {
          o("Y√™u c·∫ßu th√†nh c√¥ng, ch·ªù k·∫øt n·ªëi t·ª´ b√™n kia...‚è≥");
          rc.isWaiting = true;
          rcData.push(rc);
          fs.writeFileSync(rcp, JSON.stringify(rcData));
        }
      });
      break;
  }
}

module.exports.handleEvent = async function ({ event, api, Users }) {
  var { threadID, isGroup, body } = event;
  var tiny = async function (url) {
    const { data } = await axios.get('https://tinyurl.com/api-create.php?url=' + encodeURIComponent(url));
    return data;
  }
  if (isGroup == false) {
    if (body.startsWith(global.config.PREFIX)) return;
    const rcData = require(rcp);
    const o = (msg, id) => api.sendMessage(msg, id || threadID);
    if (rcData.some(e => (e.head == threadID || e.root == threadID))) {
      var data = rcData.find(e => (e.head == threadID || e.root == threadID));
      if (data.isStarted == true) {
        var sender = data.root == threadID ? data.root : data.head;
        var receiver = data.root == threadID ? data.head : data.root;
        var senderIncognito = data.root == threadID ? data.rootIsIncognito : data.headIsIncognito;
        if (senderIncognito == false) {
          var name = await Users.getNameUser(sender);
          body = `${name} g·ª≠i tin nh·∫Øn t·ªõi b·∫°n üíå:\n` + body;
        } else body = "Ng∆∞·ªùi b√≠ ·∫©n ƒë√£ nh·∫Øn tin v·ªõi b·∫°n üíå:\n" + body;
        if (event.attachments.length != 0) {
          body += '\nT·ªáp g·ª≠i k√®m üóÇ:'
          for (var e of event.attachments) {
            var u = await tiny(e.url);
            body += '\n- ' + u;
          }
        }
        return o(body, receiver);
      }
    }
  }
}