const axios = require("axios");
const fs = require("fs-extra");
const qs = require("qs");
// const short = require("tinyurl").shorten;
const short = (i) => i;
const regExMatchPinterest = /(https:\/\/(www.)?(pinterest.com|pin.it)[^ \n]*)/g;


module.exports.config = {
  name: "pinterest",
  version: "2.0.0",
  hasPermssion: 0,
  credits: "NTKhang",
  description: "Tải video hoặc tìm kiếm ảnh trên pinterest",
  commandCategory: "Tiện ích",
  usages: "down {url}\n-pinterest search {keyword}",
  cooldowns: 0
};

module.exports.run = async function ({
  api, event, args
}) {
  const p = global.config.PREFIX;
  const t = module.exports.config.name;
  const targetBody = event.messageReply ? event.messageReply.body: event.body;

  if (!args[0])
    return api.sendMessage({
    body: `Bạn có thể dùng:\n${p}${t} search < từ khoá tìm kiếm >\n${p}${t} down < link >\n( Có thể phản hồi link hoặc từ khóa nếu muốn )`
  }, event.threadID, event.messageID);

  if (args[0] == "down") {
    const targets = targetBody.match(regExMatchPinterest);
    if (!targets.length)
      return api.sendMessage("Bạn phải nhập link pinterest", event.threadID, event.messageID);

    const getAll = await Promise.all(targets.map(async (url) => {
      const urlDownloadImage = await getUrlDownloadImage(url);
      const {
        data: result
      } = await axios.get(urlDownloadImage, {
          responseType: "stream"
        });
      const pathDefault = result.path;
      result.path = pathDefault ? pathDefault: global.utils.randomString(5) + ".png";
      return result;
    }));

    return api.sendMessage({
      attachment: getAll
    }, event.threadID, event.messageID);
  }

  if (args[0] == "search") {
    const keyword = event.messageReply ? event.messageReply.body : args.slice(1).join(" ");
    if (!keyword)
      return api.sendMessage('Vui lòng nhập từ khoá tìm kiếm', event.threadID, event.messageID);
    const source = {
      source_url: "/search/pins/?q=" + encodeURIComponent(keyword) + "&rs=typed",
      data: {
        "options": {
          "article": null,
          "applied_filters": null,
          "appliedProductFilters": "---",
          "auto_correction_disabled": false,
          "corpus": null,
          "customized_rerank_type": null,
          "filters": null,
          "query": keyword,
          "query_pin_sigs": null,
          "redux_normalize_feed": true,
          "rs": "typed",
          "scope": "pins",
          "source_id": null
        },
        "context": {}
      },
      _: Date.now()
    };
    const url = "https://www.pinterest.com/resource/BaseSearchResource/get/?source_url=" + encodeURIComponent(source.source_url) + "&data=" + encodeURIComponent(JSON.stringify(source.data)) + "&_=" + source._;
    const {
      data
    } = await axios.get(url);
    const results = data.resource_response.data.results.filter(item => item.images);
    if (data.length == 0)
      return api.sendMessage('Không có kết quả tím kiếm nào cho từ khóa: ' + keyword, event.threadID, event.messageID);
    
    const getAll = await Promise.all(results.map(async item => {
      const allKey = Object.keys(item.images);
      const latestKey = allKey[allKey.length - 1];
      const urlDownloadImage = item.images[latestKey].url;
      const { data: result } = await axios.get(urlDownloadImage, { responseType: "stream" });
      const pathDefault = result.path;
      result.path = pathDefault ? pathDefault: global.utils.randomString(5) + ".png";
      return result;
    }));

    return api.sendMessage({
      body: `Có ${results.length} hình ảnh cho từ khóa ${keyword}:\n`,
      attachment: getAll
    }, event.threadID, event.messageID);
    
  }
	
    return api.sendMessage({
    body: `Bạn có thể dùng:\n${p}${t} search < từ khoá tìm kiếm >\n${p}${t} down < link >\n( Có thể phản hồi link hoặc từ khóa nếu muốn )`
  }, event.threadID, event.messageID);
};

async function getUrlDownloadImage(url) {
  const res = await axios.get(url);
  const json = JSON.parse(res.data.split('<script id="__PWS_DATA__" type="application/json">')[1].split('</script>')[0]);
  const pins = json.props.initialReduxState.pins;
  let getPins = pins[Object.keys(pins)[0]];
  if (getPins.images) {
    const images = getPins.images;
    const keyLength = Object.keys(images);
    const latestImages = images.orig || images[keyLength[keyLength.length - 1]];
    return latestImages.url;
  } else if (getPins.videos) {
    getPins = getPins.videos.video_list;
    return Object.values(getPins).pop().url;
  }
}